# -*- coding: utf-8 -*-
import os
import subprocess
from datetime import datetime, date

# Form implementation generated from reading ui file 'Customers_balance.ui'
#
# Created by: PyQt5 UI code generator 5.15.9
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.


from PyQt5 import QtCore, QtGui, QtWidgets
from PyQt5.QtWidgets import QTableWidgetItem

from CustomerData import CustomerData
from Encryption import Encryption


class Ui_customersBalance(object):
    def setupUi(self, customersBalance):
        customersBalance.setObjectName("customersBalance")
        customersBalance.resize(1000, 600)
        customersBalance.setMinimumSize(QtCore.QSize(1000, 600))
        customersBalance.setMaximumSize(QtCore.QSize(1000, 600))
        self.label = QtWidgets.QLabel(customersBalance)
        self.label.setGeometry(QtCore.QRect(0, 0, 1001, 601))
        self.label.setStyleSheet("background-image: url(image/BG3.jpg);")
        self.label.setText("")
        self.label.setObjectName("label")
        self.label_3 = QtWidgets.QLabel(customersBalance)
        self.label_3.setGeometry(QtCore.QRect(10, 20, 981, 41))
        self.label_3.setStyleSheet("color: rgb(255, 255, 255);\n"
"font: 75 24pt \"Perpetua Titling MT\";")
        self.label_3.setAlignment(QtCore.Qt.AlignCenter)
        self.label_3.setObjectName("label_3")
        self.frame = QtWidgets.QFrame(customersBalance)
        self.frame.setGeometry(QtCore.QRect(80, 70, 840, 70))
        self.frame.setMinimumSize(QtCore.QSize(840, 70))
        self.frame.setMaximumSize(QtCore.QSize(840, 70))
        self.frame.setStyleSheet("background-color: rgb(0, 36, 66);")
        self.frame.setFrameShape(QtWidgets.QFrame.StyledPanel)
        self.frame.setFrameShadow(QtWidgets.QFrame.Raised)
        self.frame.setObjectName("frame")
        self.label_2 = QtWidgets.QLabel(self.frame)
        self.label_2.setGeometry(QtCore.QRect(10, 10, 81, 31))
        self.label_2.setStyleSheet("font: 75 16pt \"Tahoma\";\n"
"color: rgb(255, 255, 255);")
        self.label_2.setObjectName("label_2")
        self.name = QtWidgets.QLineEdit(self.frame)
        self.name.setGeometry(QtCore.QRect(90, 10, 181, 31))
        self.name.setStyleSheet("background-color: rgb(18, 30, 49);\n"
"color: rgb(255, 255, 255);\n"
"font: 12pt \"Tahoma\";")
        self.name.setObjectName("name")
        self.label_4 = QtWidgets.QLabel(self.frame)
        self.label_4.setGeometry(QtCore.QRect(340, 10, 91, 31))
        self.label_4.setStyleSheet("font: 75 16pt \"Tahoma\";\n"
"color: rgb(255, 255, 255);")
        self.label_4.setObjectName("label_4")
        self.birthday = QtWidgets.QLineEdit(self.frame)
        self.birthday.setGeometry(QtCore.QRect(440, 10, 181, 31))
        self.birthday.setStyleSheet("background-color: rgb(18, 30, 49);\n"
"color: rgb(255, 255, 255);\n"
"font: 12pt \"Tahoma\";")
        self.birthday.setObjectName("birthday")
        self.label_5 = QtWidgets.QLabel(self.frame)
        self.label_5.setGeometry(QtCore.QRect(440, 40, 181, 31))
        self.label_5.setStyleSheet("font: 75 10pt \"Tahoma\";\n"
"color: rgb(255, 255, 255);")
        self.label_5.setAlignment(QtCore.Qt.AlignCenter)
        self.label_5.setObjectName("label_5")
        self.search_button = QtWidgets.QPushButton(self.frame)
        self.search_button.setGeometry(QtCore.QRect(700, 10, 101, 51))
        self.search_button.setFocusPolicy(QtCore.Qt.StrongFocus)
        self.search_button.setAcceptDrops(False)
        self.search_button.setAutoFillBackground(False)
        self.search_button.setStyleSheet("font: 75 20pt \"Tahoma\";\n"
"color: rgb(255, 255, 255);\n"
"background-color: rgb(51, 51, 51);")
        self.search_button.setObjectName("search_button")
        self.pushButton = QtWidgets.QPushButton(customersBalance)
        self.pushButton.setGeometry(QtCore.QRect(10, 10, 50, 50))
        self.pushButton.setMinimumSize(QtCore.QSize(50, 50))
        self.pushButton.setMaximumSize(QtCore.QSize(50, 50))
        self.pushButton.setAcceptDrops(False)
        self.pushButton.setStyleSheet("background-color: rgba(255, 255, 255, 0);")
        self.pushButton.setText("")
        icon = QtGui.QIcon()
        icon.addPixmap(QtGui.QPixmap("image/Back_button.png"), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        self.pushButton.setIcon(icon)
        self.pushButton.setIconSize(QtCore.QSize(50, 50))
        self.pushButton.setObjectName("pushButton")
        self.frame_2 = QtWidgets.QFrame(customersBalance)
        self.frame_2.setGeometry(QtCore.QRect(20, 390, 970, 190))
        self.frame_2.setMinimumSize(QtCore.QSize(970, 190))
        self.frame_2.setMaximumSize(QtCore.QSize(970, 190))
        self.frame_2.setStyleSheet("background-color: rgb(0, 36, 66);")
        self.frame_2.setFrameShape(QtWidgets.QFrame.StyledPanel)
        self.frame_2.setFrameShadow(QtWidgets.QFrame.Raised)
        self.frame_2.setObjectName("frame_2")
        self.label_6 = QtWidgets.QLabel(self.frame_2)
        self.label_6.setGeometry(QtCore.QRect(10, 20, 101, 31))
        self.label_6.setStyleSheet("font: 75 16pt \"Tahoma\";\n"
"color: rgb(255, 255, 255);")
        self.label_6.setObjectName("label_6")
        self.label_7 = QtWidgets.QLabel(self.frame_2)
        self.label_7.setGeometry(QtCore.QRect(340, 20, 151, 31))
        self.label_7.setStyleSheet("font: 75 16pt \"Tahoma\";\n"
"color: rgb(255, 255, 255);")
        self.label_7.setObjectName("label_7")
        self.txtPayment = QtWidgets.QLineEdit(self.frame_2)
        self.txtPayment.setGeometry(QtCore.QRect(540, 60, 181, 31))
        self.txtPayment.setStyleSheet("background-color: rgb(18, 30, 49);\n"
"color: rgb(255, 255, 255);\n"
"font: 12pt \"Tahoma\";")
        self.txtPayment.setObjectName("txtPayment")
        self.add_button = QtWidgets.QPushButton(self.frame_2)
        self.add_button.setGeometry(QtCore.QRect(860, 130, 101, 51))
        self.add_button.setFocusPolicy(QtCore.Qt.StrongFocus)
        self.add_button.setAcceptDrops(False)
        self.add_button.setAutoFillBackground(False)
        self.add_button.setStyleSheet("font: 75 20pt \"Tahoma\";\n"
"color: rgb(255, 255, 255);\n"
"background-color: rgb(51, 51, 51);")
        self.add_button.setObjectName("add_button")
        self.label_9 = QtWidgets.QLabel(self.frame_2)
        self.label_9.setGeometry(QtCore.QRect(10, 60, 101, 31))
        self.label_9.setStyleSheet("font: 75 16pt \"Tahoma\";\n"
"color: rgb(255, 255, 255);")
        self.label_9.setObjectName("label_9")
        self.label_10 = QtWidgets.QLabel(self.frame_2)
        self.label_10.setGeometry(QtCore.QRect(10, 100, 101, 31))
        self.label_10.setStyleSheet("font: 75 16pt \"Tahoma\";\n"
"color: rgb(255, 255, 255);")
        self.label_10.setObjectName("label_10")
        self.label_11 = QtWidgets.QLabel(self.frame_2)
        self.label_11.setGeometry(QtCore.QRect(10, 140, 101, 31))
        self.label_11.setStyleSheet("font: 75 16pt \"Tahoma\";\n"
"color: rgb(255, 255, 255);")
        self.label_11.setObjectName("label_11")
        self.label_12 = QtWidgets.QLabel(self.frame_2)
        self.label_12.setGeometry(QtCore.QRect(830, 20, 101, 31))
        self.label_12.setStyleSheet("font: 75 16pt \"Tahoma\";\n"
"color: rgb(255, 255, 255);")
        self.label_12.setObjectName("label_12")
        self.txtCategory = QtWidgets.QLabel(self.frame_2)
        self.txtCategory.setGeometry(QtCore.QRect(110, 140, 201, 31))
        self.txtCategory.setStyleSheet("font: 75 16pt \"Tahoma\";\n"
"color: rgb(255, 255, 255);")
        self.txtCategory.setText("")
        self.txtCategory.setObjectName("txtCategory")
        self.txtProduct = QtWidgets.QLabel(self.frame_2)
        self.txtProduct.setGeometry(QtCore.QRect(100, 100, 211, 31))
        self.txtProduct.setStyleSheet("font: 75 16pt \"Tahoma\";\n"
"color: rgb(255, 255, 255);")
        self.txtProduct.setText("")
        self.txtProduct.setObjectName("txtProduct")
        self.txtName = QtWidgets.QLabel(self.frame_2)
        self.txtName.setGeometry(QtCore.QRect(90, 60, 221, 31))
        self.txtName.setStyleSheet("font: 75 16pt \"Tahoma\";\n"
"color: rgb(255, 255, 255);")
        self.txtName.setText("")
        self.txtName.setObjectName("txtName")
        self.txtStatus = QtWidgets.QLabel(self.frame_2)
        self.txtStatus.setGeometry(QtCore.QRect(90, 20, 221, 31))
        self.txtStatus.setStyleSheet("font: 75 16pt \"Tahoma\";\n"
"color: rgb(255, 255, 255);")
        self.txtStatus.setText("")
        self.txtStatus.setObjectName("txtStatus")
        self.label_18 = QtWidgets.QLabel(self.frame_2)
        self.label_18.setGeometry(QtCore.QRect(340, 60, 191, 31))
        self.label_18.setStyleSheet("font: 75 16pt \"Tahoma\";\n"
"color: rgb(255, 255, 255);")
        self.label_18.setObjectName("label_18")
        self.label_19 = QtWidgets.QLabel(self.frame_2)
        self.label_19.setGeometry(QtCore.QRect(340, 100, 91, 31))
        self.label_19.setStyleSheet("font: 75 16pt \"Tahoma\";\n"
"color: rgb(255, 255, 255);")
        self.label_19.setObjectName("label_19")
        self.label_20 = QtWidgets.QLabel(self.frame_2)
        self.label_20.setGeometry(QtCore.QRect(340, 140, 91, 31))
        self.label_20.setStyleSheet("font: 75 16pt \"Tahoma\";\n"
"color: rgb(255, 255, 255);")
        self.label_20.setObjectName("label_20")
        self.txtBalance = QtWidgets.QLabel(self.frame_2)
        self.txtBalance.setGeometry(QtCore.QRect(440, 100, 281, 31))
        self.txtBalance.setStyleSheet("font: 75 16pt \"Tahoma\";\n"
"color: rgb(255, 255, 255);")
        self.txtBalance.setText("")
        self.txtBalance.setObjectName("txtBalance")
        self.txtChange = QtWidgets.QLabel(self.frame_2)
        self.txtChange.setGeometry(QtCore.QRect(440, 140, 281, 31))
        self.txtChange.setStyleSheet("font: 75 16pt \"Tahoma\";\n"
"color: rgb(255, 255, 255);")
        self.txtChange.setText("")
        self.txtChange.setObjectName("txtChange")
        self.txtTotal = QtWidgets.QLabel(self.frame_2)
        self.txtTotal.setGeometry(QtCore.QRect(500, 20, 221, 31))
        self.txtTotal.setStyleSheet("font: 75 16pt \"Tahoma\";\n"
"color: rgb(255, 255, 255);")
        self.txtTotal.setText("")
        self.txtTotal.setObjectName("txtTotal")
        self.txtQuantity = QtWidgets.QLabel(self.frame_2)
        self.txtQuantity.setGeometry(QtCore.QRect(830, 50, 101, 31))
        self.txtQuantity.setStyleSheet("font: 75 16pt \"Tahoma\";\n"
"color: rgb(255, 255, 255);")
        self.txtQuantity.setText("")
        self.txtQuantity.setAlignment(QtCore.Qt.AlignCenter)
        self.txtQuantity.setObjectName("txtQuantity")
        self.tableWidget = QtWidgets.QTableWidget(customersBalance)
        self.tableWidget.setGeometry(QtCore.QRect(20, 150, 971, 231))
        self.tableWidget.setStyleSheet("font: 12pt \"Tahoma\";\n"
"color: rgb(0, 0, 0);")
        self.tableWidget.setObjectName("tableWidget")
        self.tableWidget.setColumnCount(0)
        self.tableWidget.setRowCount(0)
        self.label.raise_()
        self.frame.raise_()
        self.label_3.raise_()
        self.pushButton.raise_()
        self.frame_2.raise_()
        self.tableWidget.raise_()

        self.retranslateUi(customersBalance)
        QtCore.QMetaObject.connectSlotsByName(customersBalance)

        self.search_button.clicked.connect(self.search_buttonActionPerformed)
        self.tableWidget.clicked.connect(self.tableMouseClicked)
        self.txtPayment.textChanged.connect(self.calculateBalance)
        self.add_button.clicked.connect(self.UpdateActionPerformed)
        self.pushButton.clicked.connect(self.backToMain)

    def retranslateUi(self, customersBalance):
        _translate = QtCore.QCoreApplication.translate
        customersBalance.setWindowTitle(_translate("customersBalance", "Customer\'s Balance"))
        self.label_3.setText(_translate("customersBalance", "customer\'s balance"))
        self.label_2.setText(_translate("customersBalance", "Name :"))
        self.label_4.setText(_translate("customersBalance", "Birthday :"))
        self.label_5.setText(_translate("customersBalance", "MM/DD/YYYY"))
        self.search_button.setText(_translate("customersBalance", "Search"))
        self.label_6.setText(_translate("customersBalance", "Status :"))
        self.label_7.setText(_translate("customersBalance", "Total Payment :"))
        self.add_button.setText(_translate("customersBalance", "Update"))
        self.label_9.setText(_translate("customersBalance", "Name :"))
        self.label_10.setText(_translate("customersBalance", "Product :"))
        self.label_11.setText(_translate("customersBalance", "Category :"))
        self.label_12.setText(_translate("customersBalance", "Quantity :"))
        self.label_18.setText(_translate("customersBalance", "Payment Received :"))
        self.label_19.setText(_translate("customersBalance", "Balance :"))
        self.label_20.setText(_translate("customersBalance", "Change :"))

    customer = []
    index = 0

    def add_item(self, data):
            self.customer.append(data)

    def retrieve(self):
            file_path = "Database/customers_data.txt"  # Replace with the actual file path

            try:
                    with open(Encryption.decrypt("Ifyfgfxj&hzxytrjwx_ifyf.ycy"), "r") as reader:
                            lines = reader.readlines()

                            for line in lines:
                                    line = Encryption.decrypt(line)
                                    arr_line = line.split(" / ")
                                    temp = CustomerData()  # Create a new instance for each item
                                    temp.setStatus(arr_line[0].strip())
                                    temp.setName(arr_line[1].strip())
                                    temp.setBirthday(arr_line[2].strip())
                                    temp.setContactNumber(arr_line[3].strip())
                                    temp.setAddress(arr_line[4].strip())
                                    temp.setProductName(arr_line[5].strip())
                                    temp.setCategory(arr_line[6].strip())

                                    try:
                                            temp.setQuantity(int(arr_line[7].strip()))
                                            temp.setTotalPayment(int(arr_line[8].strip()))
                                            temp.setPaymentReceived(int(arr_line[9].strip()))
                                            temp.setBalance(int(arr_line[10].strip()))
                                            temp.setChange(int(arr_line[11].strip()))
                                            temp.setID(int(arr_line[13].strip()))
                                    except ValueError as e:
                                            # Handle the exception gracefully (e.g., log the error, skip the item, etc.)
                                            print("Error parsing integer value:", str(e))
                                            continue  # Skip this item and proceed to the next iteration

                                    temp.setDate(arr_line[12].strip())
                                    self.add_item(temp)
            except IOError as e:
                    print("Error reading file:", str(e))


    def display_table(self, nm, bd):
        num_cols = 14

        # Filter items based on the category
        filtered_items = [item for item in self.customer if item.getName() == nm and item.getBirthday() == bd]
        num_rows = len(filtered_items)

        if num_rows == 0:
            QtWidgets.QMessageBox.warning(None, "No Data Found", "No data found for the given name and birthday.")
            return

        # Set the table dimensions
        self.tableWidget.setRowCount(num_rows)
        self.tableWidget.setColumnCount(num_cols)

        # Define the desired attribute names
        attribute_names = [
            "status", "name", "birthday", "contactNumber", "address",
            "productName", "category",  "quantity", "totalPayment", "paymentReceived",
            "balance", "change","date","id"
        ]
        self.tableWidget.setHorizontalHeaderLabels(attribute_names)

        # Populate the table with data
        for row in range(num_rows):
            item = filtered_items[row]
            for col in range(num_cols):
                attribute_name = attribute_names[col]
                value = getattr(item, attribute_name)
                table_item = QTableWidgetItem(str(value))

                # Set the item flags to make it read-only
                table_item.setFlags(QtCore.Qt.ItemIsEnabled | QtCore.Qt.ItemIsSelectable)

                self.tableWidget.setItem(row, col, table_item)

        # Adjust column widths to maximize space
        # table_width = self.tableWidget.viewport().width()
        # column_width = int(table_width / num_cols)
        # for col in range(num_cols):
        #     self.tableWidget.setColumnWidth(col, column_width)

    def search_buttonActionPerformed(self):
            if self.name.text() == "" or self.birthday.text() == "":
                    QtWidgets.QMessageBox.warning(None, "Missing Data", "Please fill up all needed data.")
                    return
            else:
                    self.display_table(self.name.text().upper(), self.birthday.text())

    def tableMouseClicked(self):
        row = self.tableWidget.currentRow()
        column = 0  # Specify the desired column index

        model = self.tableWidget.model()
        selected_data = model.data(model.index(row, column))

        if selected_data == "PAID":
            self.txtStatus.setText("")
            self.txtName.setText("")
            self.txtProduct.setText("")
            self.txtCategory.setText("")
            self.txtTotal.setText("")
            self.txtQuantity.setText("")
            self.txtBalance.setText("")
            self.txtChange.setText("")
            return

        self.index = model.data(model.index(row, 13))

        self.txtStatus.setText(model.data(model.index(row, 0)))
        self.txtName.setText(model.data(model.index(row, 1)))
        self.txtProduct.setText(model.data(model.index(row, 5)))
        self.txtCategory.setText(model.data(model.index(row, 6)))
        self.txtTotal.setText(model.data(model.index(row, 10)))
        self.txtQuantity.setText(model.data(model.index(row, 7)))
        self.txtBalance.setText("0")
        self.txtChange.setText("0")

    def calculateBalance(self, paymentText):
        totalText = self.txtTotal.text()

        if totalText == "" or paymentText == "":
            self.txtBalance.setText("")
            self.txtStatus.setText("")
            self.txtChange.setText("")
            return

        try:
            total = int(totalText)
            pay = int(paymentText)
        except (ValueError, TypeError):
            # Handle the case when paymentText is not a valid number
            self.txtBalance.setText("")
            self.txtStatus.setText("")
            self.txtChange.setText("")
            return

        bal = total - pay

        if bal > 0:
            self.txtStatus.setText("BALANCE")
            self.txtBalance.setText(str(bal))
            self.txtChange.setText("0")
        else:
            bal = abs(bal)
            self.txtBalance.setText("0")
            self.txtChange.setText(str(bal))
            self.txtStatus.setText("PAID")

    def UpdateActionPerformed(self):
        row = self.tableWidget.currentRow()
        model = self.tableWidget.model()

        if self.txtPayment.text() == "":
            QtWidgets.QMessageBox.warning(None, "Missing Data", "Please fill up all needed data.")
            return
        else:
            select = QtWidgets.QMessageBox.question(None, "Confirmation", "Sure? You want to update?",
                                                    QtWidgets.QMessageBox.Yes | QtWidgets.QMessageBox.No)
            if select == QtWidgets.QMessageBox.Yes:

                for custoData in self.customer:
                    print("custoData.getID():", custoData.getID())
                    print("self.index:", self.index)
                    if str(custoData.getID()) == str(self.index):
                        print("Condition satisfied")
                        try:
                            total_payment = int(self.txtTotal.text())
                            payment_received = int(self.txtPayment.text())
                            balance = int(self.txtBalance.text())
                            change = int(self.txtChange.text())
                        except ValueError:
                            QtWidgets.QMessageBox.warning(None, "Invalid Data",
                                                          "Please enter valid numeric values for Total Payment, Payment Received, Balance, and Change.")
                            return

                        custoData.setTotalPayment(total_payment)
                        custoData.setPaymentReceived(payment_received)
                        custoData.setBalance(balance)
                        custoData.setChange(change)
                        custoData.setStatus(self.txtStatus.text())
                        custoData.setDate(str(date.today()))
                        print("DONE")
                        try:
                            file = open(Encryption.decrypt("Ifyfgfxj&ywfsxfhynts_mnxytwd.ycy"), "a")
                            print("IM IN")
                            file.write(
                                Encryption.encrypt(
                                    custoData.getStatus() + " / " + custoData.getName() + " / " +
                                    custoData.getBirthday() + " / " + custoData.getContactNumber() + " / " +
                                    custoData.getAddress() + " / " + custoData.getProductName() + " / " +
                                    custoData.getCategory() + " / " + str(custoData.getQuantity()) + " / " +
                                    str(custoData.getTotalPayment()) + " / " + str(
                                        custoData.getPaymentReceived()) + " / " +
                                    str(custoData.getBalance()) + " / " + str(custoData.getChange()) + " / " +
                                    custoData.getDate() + " / " + str(custoData.getID()) + " / "
                                ) + "\n"
                            )
                            file.close()
                        except IOError as e:
                            print("Error writing to transaction history file:", str(e))
                        except Exception as e:
                            print("Exception occurred while writing to transaction history file:", str(e))

                        try:

                            with open(Encryption.decrypt("Ifyfgfxj&hzxytrjwx_ifyf.ycy"), "w") as file:
                                for custoData in self.customer:
                                    file.write(
                                        Encryption.encrypt(
                                            custoData.getStatus() + " / " +
                                            custoData.getName() + " / " +
                                            custoData.getBirthday() + " / " +
                                            custoData.getContactNumber() + " / " +
                                            custoData.getAddress() + " / " +
                                            custoData.getProductName() + " / " +
                                            custoData.getCategory() + " / " +
                                            str(custoData.getQuantity()) + " / " +
                                            str(custoData.getTotalPayment()) + " / " +
                                            str(custoData.getPaymentReceived()) + " / " +
                                            str(custoData.getBalance()) + " / " +
                                            str(custoData.getChange()) + " / " +
                                            custoData.getDate() + " / " +
                                            str(custoData.getID()) + " / "
                                        ) + "\n"
                                    )

                        except IOError as e:
                            print("Error writing to customers data file:", str(e))
                        except Exception as e:
                            print("Exception occurred while writing to customers data file:", str(e))

                QtWidgets.QMessageBox.information(None, "Success", "Update Successfully!")
                self.tableWidget.clearContents()  # Clear the cell contents
                self.tableWidget.setRowCount(0)  # Set the row count to zero

                self.name.setText("")
                self.birthday.setText("")
                self.txtStatus.setText("")
                self.txtName.setText("")
                self.txtProduct.setText("")
                self.txtCategory.setText("")
                self.txtTotal.setText("")
                self.txtQuantity.setText("")
                self.txtBalance.setText("")
                self.txtChange.setText("")
                self.txtPayment.setText("")

    def backToMain(self):
        customersBalance.destroy()
        current_directory = os.path.dirname(os.path.abspath(__file__))
        script_path = os.path.join(current_directory, "main.py")
        subprocess.run(["python", script_path])

if __name__ == "__main__":
    import sys
    app = QtWidgets.QApplication(sys.argv)
    customersBalance = QtWidgets.QFrame()
    ui = Ui_customersBalance()
    ui.setupUi(customersBalance)
    ui.retrieve()
    customersBalance.show()
    sys.exit(app.exec_())
