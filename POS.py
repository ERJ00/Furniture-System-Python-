# -*- coding: utf-8 -*-
from datetime import datetime
from random import random
from tkinter import messagebox

# Form implementation generated from reading ui file 'POS.ui'
#
# Created by: PyQt5 UI code generator 5.15.9
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.


from PyQt5 import QtCore, QtGui, QtWidgets
from PyQt5.QtWidgets import QApplication

import Information
from CustomerData import CustomerData
from Encryption import Encryption
from Product import Product


class Ui_POS(object):
    def setupUi(self, POS):
        POS.setObjectName("POS")
        POS.resize(800, 500)
        POS.setMinimumSize(QtCore.QSize(800, 500))
        POS.setMaximumSize(QtCore.QSize(800, 500))
        self.label_3 = QtWidgets.QLabel(POS)
        self.label_3.setGeometry(QtCore.QRect(10, 20, 781, 41))
        self.label_3.setStyleSheet("color: rgb(255, 255, 255);\n"
"font: 75 24pt \"Perpetua Titling MT\";")
        self.label_3.setAlignment(QtCore.Qt.AlignCenter)
        self.label_3.setObjectName("label_3")
        self.pushButton = QtWidgets.QPushButton(POS)
        self.pushButton.setGeometry(QtCore.QRect(10, 10, 50, 50))
        self.pushButton.setMinimumSize(QtCore.QSize(50, 50))
        self.pushButton.setMaximumSize(QtCore.QSize(50, 50))
        self.pushButton.setAcceptDrops(False)
        self.pushButton.setStyleSheet("background-color: rgba(255, 255, 255, 0);")
        self.pushButton.setText("")
        icon = QtGui.QIcon()
        icon.addPixmap(QtGui.QPixmap("image/Back_button.png"), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        self.pushButton.setIcon(icon)
        self.pushButton.setIconSize(QtCore.QSize(50, 50))
        self.pushButton.setObjectName("pushButton")
        self.label = QtWidgets.QLabel(POS)
        self.label.setGeometry(QtCore.QRect(0, 0, 800, 500))
        self.label.setStyleSheet("background-image: url(image/BG.jpeg);")
        self.label.setText("")
        self.label.setObjectName("label")
        self.frame = QtWidgets.QFrame(POS)
        self.frame.setGeometry(QtCore.QRect(40, 60, 721, 412))
        self.frame.setStyleSheet("background-color: rgb(0, 36, 66);")
        self.frame.setFrameShape(QtWidgets.QFrame.StyledPanel)
        self.frame.setFrameShadow(QtWidgets.QFrame.Raised)
        self.frame.setObjectName("frame")
        self.frame_2 = QtWidgets.QFrame(self.frame)
        self.frame_2.setGeometry(QtCore.QRect(8, 10, 151, 391))
        self.frame_2.setFrameShape(QtWidgets.QFrame.StyledPanel)
        self.frame_2.setFrameShadow(QtWidgets.QFrame.Raised)
        self.frame_2.setObjectName("frame_2")
        self.verticalLayout = QtWidgets.QVBoxLayout(self.frame_2)
        self.verticalLayout.setObjectName("verticalLayout")
        self.label_2 = QtWidgets.QLabel(self.frame_2)
        self.label_2.setStyleSheet("font: 12pt \"Tahoma\";\n"
"color: rgb(255, 255, 255);")
        self.label_2.setObjectName("label_2")
        self.verticalLayout.addWidget(self.label_2)
        self.label_4 = QtWidgets.QLabel(self.frame_2)
        self.label_4.setStyleSheet("font: 12pt \"Tahoma\";\n"
"color: rgb(255, 255, 255);")
        self.label_4.setObjectName("label_4")
        self.verticalLayout.addWidget(self.label_4)
        self.label_5 = QtWidgets.QLabel(self.frame_2)
        self.label_5.setStyleSheet("font: 12pt \"Tahoma\";\n"
"color: rgb(255, 255, 255);")
        self.label_5.setObjectName("label_5")
        self.verticalLayout.addWidget(self.label_5)
        self.label_6 = QtWidgets.QLabel(self.frame_2)
        self.label_6.setStyleSheet("font: 12pt \"Tahoma\";\n"
"color: rgb(255, 255, 255);")
        self.label_6.setObjectName("label_6")
        self.verticalLayout.addWidget(self.label_6)
        self.label_7 = QtWidgets.QLabel(self.frame_2)
        self.label_7.setStyleSheet("font: 12pt \"Tahoma\";\n"
"color: rgb(255, 255, 255);")
        self.label_7.setObjectName("label_7")
        self.verticalLayout.addWidget(self.label_7)
        self.label_8 = QtWidgets.QLabel(self.frame_2)
        self.label_8.setStyleSheet("font: 12pt \"Tahoma\";\n"
"color: rgb(255, 255, 255);")
        self.label_8.setObjectName("label_8")
        self.verticalLayout.addWidget(self.label_8)
        self.label_9 = QtWidgets.QLabel(self.frame_2)
        self.label_9.setStyleSheet("font: 12pt \"Tahoma\";\n"
"color: rgb(255, 255, 255);")
        self.label_9.setObjectName("label_9")
        self.verticalLayout.addWidget(self.label_9)
        self.label_10 = QtWidgets.QLabel(self.frame_2)
        self.label_10.setStyleSheet("font: 12pt \"Tahoma\";\n"
"color: rgb(255, 255, 255);")
        self.label_10.setObjectName("label_10")
        self.verticalLayout.addWidget(self.label_10)
        self.label_11 = QtWidgets.QLabel(self.frame_2)
        self.label_11.setStyleSheet("font: 12pt \"Tahoma\";\n"
"color: rgb(255, 255, 255);")
        self.label_11.setObjectName("label_11")
        self.verticalLayout.addWidget(self.label_11)
        self.label_12 = QtWidgets.QLabel(self.frame_2)
        self.label_12.setStyleSheet("font: 12pt \"Tahoma\";\n"
"color: rgb(255, 255, 255);")
        self.label_12.setObjectName("label_12")
        self.verticalLayout.addWidget(self.label_12)
        self.frame_4 = QtWidgets.QFrame(self.frame)
        self.frame_4.setGeometry(QtCore.QRect(190, 10, 291, 392))
        self.frame_4.setFrameShape(QtWidgets.QFrame.StyledPanel)
        self.frame_4.setFrameShadow(QtWidgets.QFrame.Raised)
        self.frame_4.setObjectName("frame_4")
        self.gridLayout_3 = QtWidgets.QGridLayout(self.frame_4)
        self.gridLayout_3.setVerticalSpacing(16)
        self.gridLayout_3.setObjectName("gridLayout_3")
        self.product_item = QtWidgets.QComboBox(self.frame_4)
        self.product_item.setStyleSheet("background-color: rgb(255, 255, 255);\n"
"font: 12pt \"Tahoma\";\n"
"color: rgb(0, 0, 0);")
        self.product_item.setObjectName("product_item")
        self.gridLayout_3.addWidget(self.product_item, 1, 0, 1, 1)
        self.payment = QtWidgets.QLineEdit(self.frame_4)
        self.payment.setStyleSheet("font: 12pt \"Tahoma\";\n"
"color: rgb(255, 255, 255);\n"
"background-color: rgb(18, 30, 49);")
        self.payment.setObjectName("payment")
        self.gridLayout_3.addWidget(self.payment, 4, 0, 1, 1)
        self.balance = QtWidgets.QLabel(self.frame_4)
        self.balance.setStyleSheet("font: 12pt \"Tahoma\";\n"
"color: rgb(255, 255, 255);")
        self.balance.setObjectName("balance")
        self.gridLayout_3.addWidget(self.balance, 5, 0, 1, 1)
        self.birthday = QtWidgets.QLineEdit(self.frame_4)
        self.birthday.setStyleSheet("font: 12pt \"Tahoma\";\n"
"color: rgb(255, 255, 255);\n"
"background-color: rgb(18, 30, 49);")
        self.birthday.setObjectName("birthday")
        self.gridLayout_3.addWidget(self.birthday, 7, 0, 1, 1)
        self.address = QtWidgets.QLineEdit(self.frame_4)
        self.address.setStyleSheet("font: 12pt \"Tahoma\";\n"
"color: rgb(255, 255, 255);\n"
"background-color: rgb(18, 30, 49);")
        self.address.setObjectName("address")
        self.gridLayout_3.addWidget(self.address, 9, 0, 1, 1)
        self.total_payment = QtWidgets.QLabel(self.frame_4)
        self.total_payment.setStyleSheet("font: 12pt \"Tahoma\";\n"
"color: rgb(255, 255, 255);")
        self.total_payment.setObjectName("total_payment")
        self.gridLayout_3.addWidget(self.total_payment, 3, 0, 1, 1)
        self.product_quantity = QtWidgets.QLabel(self.frame_4)
        self.product_quantity.setStyleSheet("font: 12pt \"Tahoma\";\n"
"color: rgb(255, 255, 255);")
        self.product_quantity.setObjectName("product_quantity")
        self.gridLayout_3.addWidget(self.product_quantity, 2, 0, 1, 1)
        self.category = QtWidgets.QComboBox(self.frame_4)
        self.category.setStyleSheet("background-color: rgb(255, 255, 255);\n"
"font: 12pt \"Tahoma\";\n"
"color: rgb(0, 0, 0);")
        self.category.setObjectName("category")
        self.gridLayout_3.addWidget(self.category, 0, 0, 1, 1)
        self.name = QtWidgets.QLineEdit(self.frame_4)
        self.name.setStyleSheet("font: 12pt \"Tahoma\";\n"
"color: rgb(255, 255, 255);\n"
"background-color: rgb(18, 30, 49);")
        self.name.setObjectName("name")
        self.gridLayout_3.addWidget(self.name, 6, 0, 1, 1)
        self.contact = QtWidgets.QLineEdit(self.frame_4)
        self.contact.setStyleSheet("font: 12pt \"Tahoma\";\n"
"color: rgb(255, 255, 255);\n"
"background-color: rgb(18, 30, 49);")
        self.contact.setObjectName("contact")
        self.gridLayout_3.addWidget(self.contact, 8, 0, 1, 1)
        self.line = QtWidgets.QFrame(self.frame)
        self.line.setGeometry(QtCore.QRect(180, 20, 5, 392))
        self.line.setMinimumSize(QtCore.QSize(5, 0))
        self.line.setMaximumSize(QtCore.QSize(5, 16777215))
        self.line.setBaseSize(QtCore.QSize(5, 0))
        self.line.setStyleSheet("color: rgb(255, 255, 255);")
        self.line.setLineWidth(10)
        self.line.setMidLineWidth(10)
        self.line.setFrameShape(QtWidgets.QFrame.VLine)
        self.line.setFrameShadow(QtWidgets.QFrame.Sunken)
        self.line.setObjectName("line")
        self.line_2 = QtWidgets.QFrame(self.frame)
        self.line_2.setGeometry(QtCore.QRect(490, 10, 5, 271))
        self.line_2.setMinimumSize(QtCore.QSize(5, 0))
        self.line_2.setMaximumSize(QtCore.QSize(5, 16777215))
        self.line_2.setBaseSize(QtCore.QSize(5, 0))
        self.line_2.setStyleSheet("color: rgb(255, 255, 255);")
        self.line_2.setLineWidth(10)
        self.line_2.setMidLineWidth(10)
        self.line_2.setFrameShape(QtWidgets.QFrame.VLine)
        self.line_2.setFrameShadow(QtWidgets.QFrame.Sunken)
        self.line_2.setObjectName("line_2")
        self.frame_3 = QtWidgets.QFrame(self.frame)
        self.frame_3.setGeometry(QtCore.QRect(506, 10, 201, 221))
        self.frame_3.setFrameShape(QtWidgets.QFrame.StyledPanel)
        self.frame_3.setFrameShadow(QtWidgets.QFrame.Raised)
        self.frame_3.setLineWidth(0)
        self.frame_3.setObjectName("frame_3")
        self.label_16 = QtWidgets.QLabel(self.frame_3)
        self.label_16.setGeometry(QtCore.QRect(10, 10, 79, 19))
        self.label_16.setStyleSheet("font: 12pt \"Tahoma\";\n"
"color: rgb(255, 255, 255);")
        self.label_16.setObjectName("label_16")
        self.label_18 = QtWidgets.QLabel(self.frame_3)
        self.label_18.setGeometry(QtCore.QRect(10, 40, 117, 19))
        self.label_18.setStyleSheet("font: 12pt \"Tahoma\";\n"
"color: rgb(255, 255, 255);")
        self.label_18.setObjectName("label_18")
        self.unit_price = QtWidgets.QLabel(self.frame_3)
        self.unit_price.setGeometry(QtCore.QRect(100, 10, 101, 20))
        self.unit_price.setStyleSheet("font: 12pt \"Tahoma\";\n"
"color: rgb(255, 255, 255);")
        self.unit_price.setObjectName("unit_price")
        self.pushButton_2 = QtWidgets.QPushButton(self.frame_3)
        self.pushButton_2.setGeometry(QtCore.QRect(40, 70, 41, 31))
        self.pushButton_2.setStyleSheet("background-color: rgb(51, 51, 51);\n"
"font: 75 24pt \"Tahoma\";\n"
"color: rgb(255, 255, 255);\n"
"")
        self.pushButton_2.setObjectName("pushButton_2")
        self.selected_quantity = QtWidgets.QLabel(self.frame_3)
        self.selected_quantity.setGeometry(QtCore.QRect(130, 40, 71, 21))
        self.selected_quantity.setStyleSheet("font: 12pt \"Tahoma\";\n"
"color: rgb(255, 255, 255);")
        self.selected_quantity.setObjectName("selected_quantity")
        self.pushButton_3 = QtWidgets.QPushButton(self.frame_3)
        self.pushButton_3.setGeometry(QtCore.QRect(100, 70, 41, 31))
        self.pushButton_3.setStyleSheet("background-color: rgb(51, 51, 51);\n"
"color: rgb(255, 255, 255);\n"
"font: 75 20pt \"Tahoma\";")
        self.pushButton_3.setObjectName("pushButton_3")
        self.label_20 = QtWidgets.QLabel(self.frame_3)
        self.label_20.setGeometry(QtCore.QRect(10, 180, 117, 19))
        self.label_20.setStyleSheet("font: 12pt \"Tahoma\";\n"
"color: rgb(255, 255, 255);")
        self.label_20.setObjectName("label_20")
        self.status = QtWidgets.QLabel(self.frame_3)
        self.status.setGeometry(QtCore.QRect(80, 150, 121, 20))
        self.status.setStyleSheet("font: 12pt \"Tahoma\";\n"
"color: rgb(255, 255, 255);")
        self.status.setText("")
        self.status.setObjectName("status")
        self.label_22 = QtWidgets.QLabel(self.frame_3)
        self.label_22.setGeometry(QtCore.QRect(10, 150, 71, 19))
        self.label_22.setStyleSheet("font: 12pt \"Tahoma\";\n"
"color: rgb(255, 255, 255);")
        self.label_22.setObjectName("label_22")
        self.change = QtWidgets.QLabel(self.frame_3)
        self.change.setGeometry(QtCore.QRect(80, 180, 121, 21))
        self.change.setStyleSheet("font: 12pt \"Tahoma\";\n"
"color: rgb(255, 255, 255);")
        self.change.setObjectName("change")
        self.label_19 = QtWidgets.QLabel(self.frame)
        self.label_19.setGeometry(QtCore.QRect(480, 290, 117, 19))
        self.label_19.setStyleSheet("font: 12pt \"Tahoma\";\n"
"color: rgb(255, 255, 255);")
        self.label_19.setObjectName("label_19")
        self.pushButton_4 = QtWidgets.QPushButton(self.frame)
        self.pushButton_4.setGeometry(QtCore.QRect(570, 340, 101, 41))
        self.pushButton_4.setStyleSheet("background-color: rgb(51, 51, 51);\n"
"font: 75 20pt \"Tahoma\";\n"
"color: rgb(255, 255, 255);")
        self.pushButton_4.setObjectName("pushButton_4")
        self.label.raise_()
        self.label_3.raise_()
        self.frame.raise_()
        self.pushButton.raise_()

        self.retranslateUi(POS)
        QtCore.QMetaObject.connectSlotsByName(POS)

        self.category.currentIndexChanged.connect(self.categoryActionPerformed)
        self.product_item.currentIndexChanged.connect(self.product_itemActionPerformed)
        self.pushButton_2.clicked.connect(self.decreaseSelectedQuantity)
        self.pushButton_3.clicked.connect(self.increaseSelectedQuantity)
        self.payment.textChanged.connect(self.calculateBalance)
        self.pushButton_4.clicked.connect(self.add_buttonActionPerformed)
    def retranslateUi(self, POS):
        _translate = QtCore.QCoreApplication.translate
        POS.setWindowTitle(_translate("POS", "Point of Sales"))
        self.label_3.setText(_translate("POS", "Point of sale"))
        self.label_2.setText(_translate("POS", "Select Category"))
        self.label_4.setText(_translate("POS", "Select Product"))
        self.label_5.setText(_translate("POS", "Available Quantity"))
        self.label_6.setText(_translate("POS", "Total Payment"))
        self.label_7.setText(_translate("POS", "Payment Received"))
        self.label_8.setText(_translate("POS", "Balance"))
        self.label_9.setText(_translate("POS", "Name"))
        self.label_10.setText(_translate("POS", "Birthday"))
        self.label_11.setText(_translate("POS", "Contact No  "))
        self.label_12.setText(_translate("POS", "Address"))
        self.balance.setText(_translate("POS", "0"))
        self.total_payment.setText(_translate("POS", "0"))
        self.product_quantity.setText(_translate("POS", "0"))
        self.label_16.setText(_translate("POS", "Unit Price :"))
        self.label_18.setText(_translate("POS", "Select Quantity :"))
        self.unit_price.setText(_translate("POS", "0"))
        self.pushButton_2.setText(_translate("POS", "-"))
        self.selected_quantity.setText(_translate("POS", "0"))
        self.pushButton_3.setText(_translate("POS", "+"))
        self.label_20.setText(_translate("POS", "Change :"))
        self.label_22.setText(_translate("POS", "Status   :"))
        self.change.setText(_translate("POS", "0"))
        self.label_19.setText(_translate("POS", "mm/dd/yyyy"))
        self.pushButton_4.setText(_translate("POS", "OK"))

    item = []
    product_category = []
    buyer = []

    def add_category(self, PC):
            for product in self.item:
                    if product.getCategory() == PC:
                            return
            self.product_category.append(PC)

    def add_item(self, data):
            self.item.append(data)

    def retrieve(self):
            file_path = "Database/products.txt"  # Replace with the actual file path

            try:
                    with open(file_path, "r") as reader:
                            for line in reader:
                                    line = Encryption.decrypt(line)
                                    arr_line = line.split(" / ")
                                    temp = Product()  # Create a new instance for each item
                                    temp.setID(int(arr_line[0].strip()))
                                    temp.setPrice(int(arr_line[1].strip()))
                                    temp.setQuantity(int(arr_line[2].strip()))
                                    temp.setProductName(arr_line[3].strip())
                                    temp.setBrand(arr_line[4].strip())
                                    temp.setDescription(arr_line[5].strip())
                                    temp.setCategory(arr_line[6].strip())
                                    self.add_category(temp.getCategory())
                                    temp.setSupplier(arr_line[7].strip())
                                    temp.setDate(arr_line[8].strip())
                                    self.add_item(temp)
                                    temp = Product()  # Create a new instance for each item
            except IOError as e:
                    print("Error reading file:", e)
            finally:
                    reader.close()

    def add_custo(self,data):
            self.buyer.append(data)

    def retrieveCustomerData(self):
            filePath = "Database/transaction_history.txt"  # Replace with the actual file path

            try:
                    with open(filePath, "r") as reader:
                            for line in reader:
                                    line = Encryption.decrypt(line)
                                    arr_line = line.split(" / ")
                                    temp = CustomerData()  # Create a new instance for each item
                                    temp.setStatus(arr_line[0].strip())
                                    temp.setName(arr_line[1].strip())
                                    temp.setBirthday(arr_line[2].strip())
                                    temp.setContactNumber(arr_line[3].strip())
                                    temp.setAddress(arr_line[4].strip())
                                    temp.setProductName(arr_line[5].strip())
                                    temp.setCategory(arr_line[6].strip())

                                    try:
                                            temp.setQuantity(int(arr_line[7].strip()))
                                            temp.setTotalPayment(int(arr_line[8].strip()))
                                            temp.setPaymentReceived(int(arr_line[9].strip()))
                                            temp.setBalance(int(arr_line[10].strip()))
                                            temp.setChange(int(arr_line[11].strip()))
                                            temp.setID(int(arr_line[13].strip()))
                                    except ValueError as e:
                                            # Handle the exception gracefully (e.g., log the error, skip the item, etc.)
                                            print("Error parsing integer value:", e)
                                            continue  # Skip this item and proceed to the next iteration

                                    temp.setDate(arr_line[12].strip())
                                    self.add_custo(temp)
            except IOError as e:
                    print("Error reading file:", e)

    def save(self, data):
            try:
                    with open(
                            "Database/customers_data.txt",
                            "a") as f:
                            encrypted_data = Encryption.encrypt(
                                    data.getStatus() + " / " + data.getName() + " / " + data.getBirthday() + " / " + data.getContactNumber() + " / " + data.getAddress() + " / " + data.getProductName() + " / " + data.getCategory() + " / " + data.getQuantity() + " / " + data.getTotalPayment() + " / " + data.getPaymentReceived() + " / " + data.getBalance() + " / " + data.getChange() + " / " + data.getDate() + " / " + data.getID() + " / ")
                            f.write(encrypted_data + "\n")
            except IOError as i:
                    i.printStackTrace()

            try:
                    with open(
                            "Database/transaction_history.txt",
                            "a") as f:
                            encrypted_data = Encryption.encrypt(
                                    data.getStatus() + " / " + data.getName() + " / " + data.getBirthday() + " / " + data.getContactNumber() + " / " + data.getAddress() + " / " + data.getProductName() + " / " + data.getCategory() + " / " + data.getQuantity() + " / " + data.getTotalPayment() + " / " + data.getPaymentReceived() + " / " + data.getBalance() + " / " + data.getChange() + " / " + data.getDate() + " / " + data.getID() + " / ")
                            f.write(encrypted_data + "\n")
            except IOError as i:
                    i.printStackTrace()

            try:
                    with open("Database/products.txt",
                              "w") as f:
                            for product in self.item:
                                    encrypted_id = Encryption.encrypt(str(product.getID()) + " / ")
                                    encrypted_price = Encryption.encrypt(str(product.getPrice()) + " / ")
                                    encrypted_quantity = Encryption.encrypt(str(product.getQuantity()) + " / ")
                                    encrypted_product_name = Encryption.encrypt(product.getProductName() + " / ")
                                    encrypted_brand = Encryption.encrypt(product.getBrand() + " / ")
                                    encrypted_description = Encryption.encrypt(product.getDescription() + " / ")
                                    encrypted_category = Encryption.encrypt(product.getCategory() + " / ")
                                    encrypted_supplier = Encryption.encrypt(product.getSupplier() + " / ")
                                    encrypted_date = Encryption.encrypt(product.getDate() + " / ")
                                    f.write(encrypted_id + encrypted_price + encrypted_quantity + encrypted_product_name + encrypted_brand + encrypted_description + encrypted_category + encrypted_supplier + encrypted_date + "\n")
            except IOError as e:
                    print("An error occurred.")
                    e.printStackTrace()

    def checkID(self, id):
            for customer in self.buyer:
                    if customer.getID() == id:
                            return True
            return False

    def formWindowOpened(self):
            mod = QtGui.QStandardItemModel()
            for category in self.product_category:
                    item = QtGui.QStandardItem(category)
                    mod.appendRow(item)
            self.category.setModel(mod)
            self.category.setCurrentIndex(-1)

    def categoryActionPerformed(self):
            prod_items = []
            print(self.category.currentText())

            for product in self.item:
                    if product.getCategory() == self.category.currentText() and product.getQuantity() > 0:
                            prod_items.append(product.getProductName())

            mod = QtGui.QStandardItemModel()
            for item in prod_items:
                    mod.appendRow(QtGui.QStandardItem(item))

            self.product_item.setModel(mod)
            self.product_item.setCurrentIndex(-1)
            self.product_item.setCurrentText("")

    def product_itemActionPerformed(self):
            if self.product_item.currentText() == "":
                    self.product_quantity.setText("0")
                    self.selected_quantity.setText("0")
                    self.unit_price.setText("0")

            for product in self.item:
                    if product.getProductName() == self.product_item.currentText():
                            self.product_quantity.setText(str(product.getQuantity()))
                            self.unit_price.setText(str(product.getPrice()))

    def decreaseSelectedQuantity(self):
            selectedQuantity = int(self.selected_quantity.text())
            totalPayment = int(self.total_payment.text())
            if selectedQuantity != 0:
                    selectedQuantity -= 1
                    self.selected_quantity.setText(str(selectedQuantity))
                    self.total_payment.setText(str(totalPayment - int(self.unit_price.text())))

    def increaseSelectedQuantity(self):
            total = int(self.product_quantity.text())
            selectedQuantity = int(self.selected_quantity.text())
            if selectedQuantity != total:
                    selectedQuantity += 1
                    self.selected_quantity.setText(str(selectedQuantity))
                    self.total_payment.setText(str(selectedQuantity * int(self.unit_price.text())))

    def calculateBalance(self, paymentText):
            totalText = self.total_payment.text()

            if totalText == "" or paymentText == "":
                    self.balance.setText("")
                    self.status.setText("")
                    return

            try:
                    total = int(totalText)
                    pay = int(paymentText)
            except (ValueError, TypeError):
                    # Handle the case when paymentText is not a valid number
                    self.balance.setText("")
                    self.status.setText("")
                    return

            bal = total - pay

            if bal > 0:
                    self.status.setText("BALANCE")
                    self.balance.setText(str(bal))
                    self.change.setText("0")
            else:
                    bal = abs(bal)
                    self.balance.setText("0")
                    self.change.setText(str(bal))
                    self.status.setText("PAID")

    import tkinter as tk
    from tkinter import messagebox

    def add_buttonActionPerformed(self, evt):
            data = CustomerData()
            if self.category.getSelectedItem() is None or self.product_item.getSelectedItem() is None or "0" == self.selected_quantity.getText() or self.payment.getText() == "" or self.name.getText() == "" or self.birthday.getText() == "" or self.contact.getText() == "" or self.address.getText() == "":
                    messagebox.showerror("Error", "Please fill up all needed data.")
            else:
                    rand = random.Random()
                    ID = 0
                    while True:
                            ID = rand.randint(11111, 99999)
                            if self.checkID(ID) == False:
                                    break
                    data.setID(ID)
                    data.setStatus(self.status.getText())
                    data.setName(self.name.getText().upper())
                    data.setBirthday(self.birthday.getText())
                    data.setContactNumber(self.contact.getText())
                    data.setAddress(self.address.getText().upper())
                    data.setCategory(self.category.getSelectedItem())
                    data.setProductName(self.product_item.getSelectedItem())
                    data.setQuantity(int(self.selected_quantity.getText()))
                    data.setTotalPayment(int(self.total_payment.getText()))
                    data.setPaymentReceived(int(self.payment.getText()))
                    data.setBalance(int(self.balance.getText()))
                    data.setChange(int(self.change.getText()))
                    data.setDate(str(datetime.date.today()))

                    for product in self.item:
                            if product.getProductName() == self.product_item.getSelectedItem() and product.getCategory() == self.category.getSelectedItem():
                                    AQ = int(self.product_quantity.getText())
                                    SQ = int(self.selected_quantity.getText())
                                    product.setQuantity(AQ - SQ)
                                    break

                    self.save(data)

                    self.category.setSelectedItem(None)
                    self.product_item.setSelectedItem(None)
                    self.unit_price.setText("0")
                    self.selected_quantity.setText("0")
                    self.product_quantity.setText("0")
                    self.total_payment.setText("0")
                    self.balance.setText("0")
                    self.status.setText("")
                    self.change.setText("0")
                    self.payment.setText("")
                    self.birthday.setText("")
                    self.contact.setText("")
                    self.address.setText("")
                    self.birthday.setText("")
                    self.name.setText("")

                    info = Information(data)
                    info.show()

                    messagebox.showinfo("Success", "Data saved successfully.")


if __name__ == "__main__":
    import sys
    app = QtWidgets.QApplication(sys.argv)
    POS = QtWidgets.QFrame()
    ui = Ui_POS()
    ui.setupUi(POS)
    ui.retrieve()
    ui.retrieveCustomerData()
    ui.formWindowOpened()
    POS.show()
    sys.exit(app.exec_())
