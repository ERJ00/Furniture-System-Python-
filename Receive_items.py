# -*- coding: utf-8 -*-
import os
import subprocess
import datetime
import random
from tkinter import messagebox

# Form implementation generated from reading ui file 'Receive_items.ui'
#
# Created by: PyQt5 UI code generator 5.15.9
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.


from PyQt5 import QtCore, QtGui, QtWidgets
from PyQt5.QtGui import QColor
from PyQt5.QtWidgets import QMessageBox, QFrame, QLabel
from Encryption import Encryption
from Product import Product


class Ui_ReceiveItems(object):
    def setupUi(self, ReceiveItems):
        ReceiveItems.setObjectName("ReceiveItems")
        ReceiveItems.setEnabled(True)
        ReceiveItems.resize(800, 500)
        ReceiveItems.setMinimumSize(QtCore.QSize(800, 500))
        ReceiveItems.setMaximumSize(QtCore.QSize(800, 500))
        ReceiveItems.setAutoFillBackground(True)
        self.tableWidget = QtWidgets.QTableWidget(ReceiveItems)
        self.tableWidget.setGeometry(QtCore.QRect(10, 70, 781, 411))
        font = QtGui.QFont()
        font.setFamily("Tahoma")
        font.setPointSize(12)
        self.tableWidget.setFont(font)
        self.tableWidget.setAutoFillBackground(True)
        self.tableWidget.setStyleSheet("background-color: rgb(0, 36, 66)")
        self.tableWidget.setObjectName("tableWidget")
        self.tableWidget.setColumnCount(0)
        self.tableWidget.setRowCount(0)
        self.label_3 = QtWidgets.QLabel(ReceiveItems)
        self.label_3.setGeometry(QtCore.QRect(10, 10, 781, 41))
        self.label_3.setStyleSheet("color: rgb(255, 255, 255);\n"
"font: 75 24pt \"Perpetua Titling MT\";")
        self.label_3.setAlignment(QtCore.Qt.AlignCenter)
        self.label_3.setObjectName("label_3")
        self.BACKBUTTON = QtWidgets.QPushButton(ReceiveItems)
        self.BACKBUTTON.setGeometry(QtCore.QRect(10, 10, 50, 50))
        self.BACKBUTTON.setMinimumSize(QtCore.QSize(50, 50))
        self.BACKBUTTON.setMaximumSize(QtCore.QSize(50, 50))
        self.BACKBUTTON.setAcceptDrops(False)
        self.BACKBUTTON.setAutoFillBackground(False)
        self.BACKBUTTON.setStyleSheet("background-color: rgba(255, 255, 255, 0);")
        self.BACKBUTTON.setText("")
        icon = QtGui.QIcon()
        icon.addPixmap(QtGui.QPixmap("image/Back_button.png"), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        self.BACKBUTTON.setIcon(icon)
        self.BACKBUTTON.setIconSize(QtCore.QSize(50, 50))
        self.BACKBUTTON.setCheckable(False)
        self.BACKBUTTON.setObjectName("BACKBUTTON")
        self.label = QtWidgets.QLabel(ReceiveItems)
        self.label.setGeometry(QtCore.QRect(-1, -1, 1421, 561))
        self.label.setAutoFillBackground(False)
        self.label.setStyleSheet("background-image: url(image/BG.jpeg);")
        self.label.setText("")
        self.label.setObjectName("label")
        self.PRODUCTTEXT = QtWidgets.QLineEdit(ReceiveItems)
        self.PRODUCTTEXT.setGeometry(QtCore.QRect(50, 120, 251, 31))
        self.PRODUCTTEXT.setObjectName("PRODUCTTEXT")
        self.PRODUCT = QtWidgets.QLabel(ReceiveItems)
        self.PRODUCT.setGeometry(QtCore.QRect(50, 90, 111, 21))
        font = QtGui.QFont()
        font.setFamily("Perpetua Titling MT")
        font.setPointSize(16)
        font.setBold(False)
        font.setItalic(False)
        font.setWeight(9)
        self.PRODUCT.setFont(font)
        self.PRODUCT.setStyleSheet("color: rgb(255, 255, 255);\n"
"font: 75 16pt \"Perpetua Titling MT\";")
        self.PRODUCT.setTextFormat(QtCore.Qt.RichText)
        self.PRODUCT.setAlignment(QtCore.Qt.AlignCenter)
        self.PRODUCT.setObjectName("PRODUCT")
        self.BRAND = QtWidgets.QLabel(ReceiveItems)
        self.BRAND.setGeometry(QtCore.QRect(470, 90, 111, 21))
        font = QtGui.QFont()
        font.setFamily("Perpetua Titling MT")
        font.setPointSize(16)
        font.setBold(False)
        font.setItalic(False)
        font.setWeight(9)
        self.BRAND.setFont(font)
        self.BRAND.setStyleSheet("color: rgb(255, 255, 255);\n"
"font: 75 16pt \"Perpetua Titling MT\";")
        self.BRAND.setTextFormat(QtCore.Qt.RichText)
        self.BRAND.setAlignment(QtCore.Qt.AlignCenter)
        self.BRAND.setObjectName("BRAND")
        self.UNITPRICE = QtWidgets.QLabel(ReceiveItems)
        self.UNITPRICE.setGeometry(QtCore.QRect(40, 180, 131, 21))
        font = QtGui.QFont()
        font.setFamily("Perpetua Titling MT")
        font.setPointSize(16)
        font.setBold(False)
        font.setItalic(False)
        font.setWeight(9)
        self.UNITPRICE.setFont(font)
        self.UNITPRICE.setStyleSheet("color: rgb(255, 255, 255);\n"
"font: 75 16pt \"Perpetua Titling MT\";")
        self.UNITPRICE.setTextFormat(QtCore.Qt.RichText)
        self.UNITPRICE.setAlignment(QtCore.Qt.AlignCenter)
        self.UNITPRICE.setObjectName("UNITPRICE")
        self.UPTEXT = QtWidgets.QLineEdit(ReceiveItems)
        self.UPTEXT.setGeometry(QtCore.QRect(50, 210, 251, 31))
        self.UPTEXT.setObjectName("UPTEXT")
        self.QUANTITY = QtWidgets.QLabel(ReceiveItems)
        self.QUANTITY.setGeometry(QtCore.QRect(480, 180, 131, 21))
        font = QtGui.QFont()
        font.setFamily("Perpetua Titling MT")
        font.setPointSize(16)
        font.setBold(False)
        font.setItalic(False)
        font.setWeight(9)
        self.QUANTITY.setFont(font)
        self.QUANTITY.setStyleSheet("color: rgb(255, 255, 255);\n"
"font: 75 16pt \"Perpetua Titling MT\";")
        self.QUANTITY.setTextFormat(QtCore.Qt.RichText)
        self.QUANTITY.setAlignment(QtCore.Qt.AlignCenter)
        self.QUANTITY.setObjectName("QUANTITY")
        self.DESCRIPTION = QtWidgets.QLabel(ReceiveItems)
        self.DESCRIPTION.setGeometry(QtCore.QRect(50, 270, 141, 21))
        font = QtGui.QFont()
        font.setFamily("Perpetua Titling MT")
        font.setPointSize(16)
        font.setBold(False)
        font.setItalic(False)
        font.setWeight(9)
        self.DESCRIPTION.setFont(font)
        self.DESCRIPTION.setStyleSheet("color: rgb(255, 255, 255);\n"
"font: 75 16pt \"Perpetua Titling MT\";")
        self.DESCRIPTION.setTextFormat(QtCore.Qt.RichText)
        self.DESCRIPTION.setAlignment(QtCore.Qt.AlignCenter)
        self.DESCRIPTION.setObjectName("DESCRIPTION")
        self.DSCTEXT = QtWidgets.QLineEdit(ReceiveItems)
        self.DSCTEXT.setGeometry(QtCore.QRect(50, 300, 251, 31))
        self.DSCTEXT.setObjectName("DSCTEXT")
        self.BRANDTXT = QtWidgets.QLineEdit(ReceiveItems)
        self.BRANDTXT.setGeometry(QtCore.QRect(490, 120, 251, 31))
        self.BRANDTXT.setObjectName("BRANDTXT")
        self.QTYTEXT = QtWidgets.QLineEdit(ReceiveItems)
        self.QTYTEXT.setGeometry(QtCore.QRect(490, 210, 251, 31))
        self.QTYTEXT.setObjectName("QTYTEXT")
        self.SUPPLIER = QtWidgets.QLabel(ReceiveItems)
        self.SUPPLIER.setGeometry(QtCore.QRect(470, 270, 141, 21))
        font = QtGui.QFont()
        font.setFamily("Perpetua Titling MT")
        font.setPointSize(16)
        font.setBold(False)
        font.setItalic(False)
        font.setWeight(9)
        self.SUPPLIER.setFont(font)
        self.SUPPLIER.setStyleSheet("color: rgb(255, 255, 255);\n"
"font: 75 16pt \"Perpetua Titling MT\";")
        self.SUPPLIER.setTextFormat(QtCore.Qt.RichText)
        self.SUPPLIER.setAlignment(QtCore.Qt.AlignCenter)
        self.SUPPLIER.setObjectName("SUPPLIER")
        self.SUPPTEXT = QtWidgets.QLineEdit(ReceiveItems)
        self.SUPPTEXT.setGeometry(QtCore.QRect(490, 300, 251, 31))
        self.SUPPTEXT.setObjectName("SUPPTEXT")
        self.CATEGORY = QtWidgets.QLabel(ReceiveItems)
        self.CATEGORY.setGeometry(QtCore.QRect(40, 360, 141, 21))
        font = QtGui.QFont()
        font.setFamily("Perpetua Titling MT")
        font.setPointSize(16)
        font.setBold(False)
        font.setItalic(False)
        font.setWeight(9)
        self.CATEGORY.setFont(font)
        self.CATEGORY.setStyleSheet("color: rgb(255, 255, 255);\n"
"font: 75 16pt \"Perpetua Titling MT\";")
        self.CATEGORY.setTextFormat(QtCore.Qt.RichText)
        self.CATEGORY.setAlignment(QtCore.Qt.AlignCenter)
        self.CATEGORY.setObjectName("CATEGORY")
        self.CATEGCBOX = QtWidgets.QComboBox(ReceiveItems)
        self.CATEGCBOX.setGeometry(QtCore.QRect(50, 390, 221, 31))
        self.CATEGCBOX.setObjectName("CATEGCBOX")
        self.ADDEDIT_2 = QtWidgets.QLabel(ReceiveItems)
        self.ADDEDIT_2.setGeometry(QtCore.QRect(490, 360, 221, 21))
        font = QtGui.QFont()
        font.setFamily("Perpetua Titling MT")
        font.setPointSize(16)
        font.setBold(False)
        font.setItalic(False)
        font.setWeight(9)
        self.ADDEDIT_2.setFont(font)
        self.ADDEDIT_2.setStyleSheet("color: rgb(255, 255, 255);\n"
"font: 75 16pt \"Perpetua Titling MT\";")
        self.ADDEDIT_2.setTextFormat(QtCore.Qt.RichText)
        self.ADDEDIT_2.setAlignment(QtCore.Qt.AlignCenter)
        self.ADDEDIT_2.setObjectName("ADDEDIT_2")
        self.ADDEDIT = QtWidgets.QLineEdit(ReceiveItems)
        self.ADDEDIT.setGeometry(QtCore.QRect(490, 390, 151, 31))
        self.ADDEDIT.setObjectName("ADDEDIT")
        self.ADD = QtWidgets.QPushButton(ReceiveItems)
        self.ADD.setGeometry(QtCore.QRect(350, 420, 101, 41))
        self.ADD.setObjectName("ADD")
        self.ADD_2 = QtWidgets.QPushButton(ReceiveItems)
        self.ADD_2.setGeometry(QtCore.QRect(660, 390, 71, 31))
        self.ADD_2.setObjectName("ADD_2")
        self.ADD_3 = QtWidgets.QPushButton(ReceiveItems)
        self.ADD_3.setGeometry(QtCore.QRect(660, 430, 71, 31))
        self.ADD_3.setObjectName("ADD_3")
        self.label.raise_()
        self.tableWidget.raise_()
        self.label_3.raise_()
        self.BACKBUTTON.raise_()
        self.PRODUCTTEXT.raise_()
        self.PRODUCT.raise_()
        self.BRAND.raise_()
        self.UNITPRICE.raise_()
        self.UPTEXT.raise_()
        self.QUANTITY.raise_()
        self.DESCRIPTION.raise_()
        self.DSCTEXT.raise_()
        self.BRANDTXT.raise_()
        self.QTYTEXT.raise_()
        self.SUPPLIER.raise_()
        self.SUPPTEXT.raise_()
        self.CATEGORY.raise_()
        self.CATEGCBOX.raise_()
        self.ADDEDIT_2.raise_()
        self.ADDEDIT.raise_()
        self.ADD.raise_()
        self.ADD_2.raise_()
        self.ADD_3.raise_()

        self.retranslateUi(ReceiveItems)
        QtCore.QMetaObject.connectSlotsByName(ReceiveItems)

        #makes the combo box clicable (di naman ata kailangan)
        #self.CATEGCBOX.activated.connect(self.pressed)

        self.BACKBUTTON.clicked.connect(self.backToMain)

        #ADD_2 button to add text to combo box from text box
        self.ADD_2.clicked.connect(self.addTexttoComboBox)

        #ADD_3 button to edit text from combo box
        self.ADD_3.clicked.connect(self.editCombo)

        #COMBO BOX
        #self.CATEGCBOX.addItems(["DINING ROOM", "LIVING ROOM", "BEDROOM"])

        #ADD BUTTON
        self.ADD.clicked.connect(self.AddItems)

    def retranslateUi(self, ReceiveItems):
        _translate = QtCore.QCoreApplication.translate
        ReceiveItems.setWindowTitle(_translate("ReceiveItems", "Receive Items"))
        self.label_3.setText(_translate("ReceiveItems", "receive items"))
        self.PRODUCT.setText(_translate("ReceiveItems", "PRODUCT"))
        self.BRAND.setText(_translate("ReceiveItems", "BRAND"))
        self.UNITPRICE.setText(_translate("ReceiveItems", "UNIT PRICE"))
        self.QUANTITY.setText(_translate("ReceiveItems", "quantity"))
        self.DESCRIPTION.setText(_translate("ReceiveItems", "DESCRIPTION"))
        self.SUPPLIER.setText(_translate("ReceiveItems", "SUPPLIER"))
        self.CATEGORY.setText(_translate("ReceiveItems", "CATEGORY"))
        self.ADDEDIT_2.setText(_translate("ReceiveItems", "ADD/EDIT CATEGORY"))
        self.ADD.setText(_translate("ReceiveItems", "ADD"))
        self.ADD_2.setText(_translate("ReceiveItems", "ADD"))
        self.ADD_3.setText(_translate("ReceiveItems", "EDIT"))

    item = []
    product_category = []

    def add_category(self, PC):
        for product in self.item:
            if product.getCategory() == PC:
                return
        self.product_category.append(PC)

    def add_item(self, data):
        self.item.append(data)

    def retrieve(self):
        file_path = "Database/products.txt"  # Replace with the actual file path

        try:
            with open(file_path, "r") as reader:
                for line in reader:
                    line = Encryption.decrypt(line)
                    arr_line = line.split(" / ")
                    temp = Product()  # Create a new instance for each item
                    temp.setID(int(arr_line[0].strip()))
                    temp.setPrice(int(arr_line[1].strip()))
                    temp.setQuantity(int(arr_line[2].strip()))
                    temp.setProductName(arr_line[3].strip())
                    temp.setBrand(arr_line[4].strip())
                    temp.setDescription(arr_line[5].strip())
                    temp.setCategory(arr_line[6].strip())
                    self.add_category(temp.getCategory())
                    temp.setSupplier(arr_line[7].strip())
                    temp.setDate(arr_line[8].strip())
                    self.add_item(temp)
                    temp = Product()  # Create a new instance for each item
        except IOError as e:
            print("Error reading file:", e)
        finally:
            reader.close()

    def formWindowOpened(self):
        mod = QtGui.QStandardItemModel()
        for category in self.product_category:
            item = QtGui.QStandardItem(category)
            mod.appendRow(item)
        self.CATEGCBOX.setModel(mod)
        self.CATEGCBOX.setCurrentIndex(-1)

    def backToMain(self):
        ReceiveItems.destroy()
        current_directory = os.path.dirname(os.path.abspath(__file__))
        script_path = os.path.join(current_directory, "main.py")
        subprocess.run(["python", script_path])

    def pressed(self):
        print(self.CATEGCBOX.currentText())

    def addTexttoComboBox(self):
        text = self.ADDEDIT.text().upper()
        if text == "":
            messagebox.showwarning("Missing Data", "Please fill up all needed data.")
            return

        # Check if the text already exists in the combobox items
        if text in [self.CATEGCBOX.itemText(i) for i in range(self.CATEGCBOX.count())]:
            messagebox.showwarning("Duplicate Entry", "Category already exists.")
            return

        self.CATEGCBOX.addItem(text)
        messagebox.showinfo("Message Dialog", "Category Successfully added.")

    def editCombo(self):
        if self.CATEGCBOX.currentText() == "":
            messagebox.showwarning("Select Category", "Please select category.")
            return
        #gets the selected item from the cbox
        index = self.CATEGCBOX.currentIndex()
        #get new text from the text edit
        text = self.ADDEDIT.text().upper()
        #sets the new text for the selected category
        self.CATEGCBOX.setItemText(index, text)
        messagebox.showinfo("Edit Category", "Category Successfully Edited.")

    def AddItems(self):
        productName = self.PRODUCTTEXT.text().upper().strip()
        brand = self.BRANDTXT.text().upper().strip()
        priceText = self.UPTEXT.text().strip()
        quantityText = self.QTYTEXT.text().strip()
        description = self.DSCTEXT.text().strip()
        supplier = self.SUPPTEXT.text().strip()
        category = self.CATEGCBOX.currentText().upper().strip()

        if (productName == "" or brand == "" or priceText == "" or quantityText == "" or
                description == "" or supplier == "" or category == ""):
            messagebox.showwarning("Missing Data", "Please fill up all needed data.")
            return
        try:
            price = int(priceText)
            quantity = int(quantityText)

        except ValueError:
            messagebox.showerror("Invalid Data", "Please enter valid numeric values for price and quantity.")
            return

        data = Product()
        data.setProductName(productName)
        data.setBrand(brand)
        data.setPrice(price)
        data.setQuantity(quantity)
        data.setDescription(description)
        data.setSupplier(supplier)
        data.setCategory(category)
        data.setDate(str(datetime.date.today()))

        index = self.check_product(data.getProductName(), data.getBrand(), data.getCategory())
        print(index)
        if index != 0:
            data.setID(index)

            for product in self.item:
                if product.getID() == index:
                    product.setQuantity(product.getQuantity() + quantity)
                    product.setSupplier(data.getSupplier())
                    product.setDate(data.getDate())
                    product.setPrice(data.getPrice())
                    messagebox.showinfo("Information", "Updated successfully.")
                    print("Update", index)
                    break
        else:
            print("IM IN")
            ID = random.randint(11111, 99999)
            while self.checkID(ID) == True:
                ID = random.randint(11111, 99999)
            print("Done")
            data.setID(ID)
            print("New", index)
            self.add_item(data)
            messagebox.showinfo("Information", "New product successfully added.")

        self.PRODUCTTEXT.setText("")
        self.BRANDTXT.setText("")
        self.UPTEXT.setText("")
        self.QTYTEXT.setText("")
        self.DSCTEXT.setText("")
        self.SUPPTEXT.setText("")
        self.CATEGCBOX.setCurrentText("")
        self.save(data)

    def save(self, data):
        try:
            with open(
                    "Database/received_product_history.txt",
                    "a") as f:
                encryptedLine = Encryption.encrypt(
                    str(data.getID()) + " / " +
                    str(data.getPrice()) + " / " +
                    str(data.getQuantity()) + " / " +
                    data.getProductName() + " / " +
                    data.getBrand() + " / " +
                    data.getDescription() + " / " +
                    data.getCategory() + " / " +
                    data.getSupplier() + " / " +
                    data.getDate() + " / "
                )
                f.write(encryptedLine + "\n")
        except IOError as i:
            print("An error occurred while writing to received product history file:", str(i))

        try:
            with open("Database/products.txt",
                      "w") as myWriter:
                for product in self.item:
                    myWriter.write(
                        Encryption.encrypt(str(product.getID()) + " / ") +
                        Encryption.encrypt(str(product.getPrice()) + " / ") +
                        Encryption.encrypt(str(product.getQuantity()) + " / ") +
                        Encryption.encrypt(product.getProductName() + " / ") +
                        Encryption.encrypt(product.getBrand() + " / ") +
                        Encryption.encrypt(product.getDescription() + " / ") +
                        Encryption.encrypt(product.getCategory() + " / ") +
                        Encryption.encrypt(product.getSupplier() + " / ") +
                        Encryption.encrypt(product.getDate() + " / ") +
                        "\n"
                    )
        except IOError as e:
            print("An error occurred while writing to products file:", str(e))

    def checkID(self, id):
            for customer in self.item:
                    if customer.getID() == id:
                            return True
            return False

    def check_product(self, name, brand, category):
        print("name : " + name)
        print("Brand : " + brand)
        for product in self.item:
            if product.getProductName() == name and product.getBrand() == brand and product.getCategory() == category:
                return product.getID()
        return 0

    def displayItemsWindow(self, prod_text, brand_text, up_text, qty_text, desc_text, supp_text, category_text):
        self.DisplayItems = QtWidgets.QFrame()
        self.ui = Ui_DisplayItems()
        self.ui.setupUi(self.DisplayItems, prod_text, brand_text, up_text, qty_text, desc_text, supp_text, category_text)
        self.DisplayItems.show()


class Ui_DisplayItems(object):
    def setupUi(self, DisplayItems, prod_text, brand_text, up_text, qty_text, desc_text, supp_text, category_text):
        DisplayItems.setObjectName("DisplayItems")
        DisplayItems.setEnabled(True)
        DisplayItems.resize(400, 400)
        DisplayItems.setMinimumSize(QtCore.QSize(400, 400))
        DisplayItems.setMaximumSize(QtCore.QSize(400, 400))
        DisplayItems.setAutoFillBackground(True)
        palette = QtGui.QPalette()
        palette.setColor(QtGui.QPalette.Background, QtGui.QColor(135, 206, 235))
        DisplayItems.setPalette(palette)
        self.label = QtWidgets.QLabel(DisplayItems)
        self.label.setGeometry(QtCore.QRect(10, 10, 381, 41))
        self.label.setStyleSheet("color: rgb(0, 0, 0);\n"
                                 "font: 75 20pt \"Perpetua Titling MT\";")
        self.label.setAlignment(QtCore.Qt.AlignCenter)
        self.label.setObjectName("label")
        self.prod_label = QtWidgets.QLabel(DisplayItems)
        self.prod_label.setGeometry(QtCore.QRect(30, 80, 100, 21))
        self.prod_label.setStyleSheet("font: 12pt \"Perpetua Titling MT\";")
        self.prod_label.setObjectName("prod_label")
        self.brand_label = QtWidgets.QLabel(DisplayItems)
        self.brand_label.setGeometry(QtCore.QRect(30, 120, 100, 21))
        self.brand_label.setStyleSheet("font: 12pt \"Perpetua Titling MT\";")
        self.brand_label.setObjectName("brand_label")
        self.up_label = QtWidgets.QLabel(DisplayItems)
        self.up_label.setGeometry(QtCore.QRect(30, 160, 100, 21))
        self.up_label.setStyleSheet("font: 12pt \"Perpetua Titling MT\";")
        self.up_label.setObjectName("up_label")
        self.qty_label = QtWidgets.QLabel(DisplayItems)
        self.qty_label.setGeometry(QtCore.QRect(30, 200, 100, 21))
        self.qty_label.setStyleSheet("font: 12pt \"Perpetua Titling MT\";")
        self.qty_label.setObjectName("qty_label")
        self.desc_label = QtWidgets.QLabel(DisplayItems)
        self.desc_label.setGeometry(QtCore.QRect(30, 240, 100, 21))
        self.desc_label.setStyleSheet("font: 12pt \"Perpetua Titling MT\";")
        self.desc_label.setObjectName("desc_label")
        self.supplier_label = QtWidgets.QLabel(DisplayItems)
        self.supplier_label.setGeometry(QtCore.QRect(30, 280, 100, 21))
        self.supplier_label.setStyleSheet("font: 12pt \"Perpetua Titling MT\";")
        self.supplier_label.setObjectName("supplier_label")
        self.prod_value = QtWidgets.QLabel(DisplayItems)
        self.prod_value.setGeometry(QtCore.QRect(150, 80, 231, 21))
        self.prod_value.setStyleSheet("font: 12pt \"Perpetua Titling MT\";")
        self.prod_value.setObjectName("prod_value")
        self.brand_value = QtWidgets.QLabel(DisplayItems)
        self.brand_value.setGeometry(QtCore.QRect(150, 120, 231, 21))
        self.brand_value.setStyleSheet("font: 12pt \"Perpetua Titling MT\";")
        self.brand_value.setObjectName("brand_value")
        self.up_value = QtWidgets.QLabel(DisplayItems)
        self.up_value.setGeometry(QtCore.QRect(150, 160, 231, 21))
        self.up_value.setStyleSheet("font: 12pt \"Perpetua Titling MT\";")
        self.up_value.setObjectName("up_value")
        self.qty_value = QtWidgets.QLabel(DisplayItems)
        self.qty_value.setGeometry(QtCore.QRect(150, 200, 231, 21))
        self.qty_value.setStyleSheet("font: 12pt \"Perpetua Titling MT\";")
        self.qty_value.setObjectName("qty_value")
        self.desc_value = QtWidgets.QLabel(DisplayItems)
        self.desc_value.setGeometry(QtCore.QRect(150, 240, 231, 21))
        self.desc_value.setStyleSheet("font: 12pt \"Perpetua Titling MT\";")
        self.desc_value.setObjectName("desc_value")
        self.supplier_value = QtWidgets.QLabel(DisplayItems)
        self.supplier_value.setGeometry(QtCore.QRect(150, 280, 231, 21))
        self.supplier_value.setStyleSheet("font: 12pt \"Perpetua Titling MT\";")
        self.supplier_value.setObjectName("supplier_value")
        self.date_label = QtWidgets.QLabel(DisplayItems)
        self.date_label.setGeometry(QtCore.QRect(30, 50, 341, 21))
        self.date_label.setStyleSheet("font: 10pt \"Perpetua Titling MT\";")
        self.date_label.setObjectName("date_label")
        self.date_label.setAlignment(QtCore.Qt.AlignCenter)
        self.category_label = QtWidgets.QLabel(DisplayItems)
        self.category_label.setGeometry(QtCore.QRect(30, 360, 100, 21))
        self.category_label.setStyleSheet("font: 12pt \"Perpetua Titling MT\";")
        self.category_label.setObjectName("category_label")
        self.category_value = QtWidgets.QLabel(DisplayItems)
        self.category_value.setGeometry(QtCore.QRect(150, 360, 231, 21))
        self.category_value.setStyleSheet("font: 12pt \"Perpetua Titling MT\";")
        self.category_value.setObjectName("category_value")

        self.retranslateUi(DisplayItems, prod_text, brand_text, up_text, qty_text, desc_text, supp_text, category_text)
        QtCore.QMetaObject.connectSlotsByName(DisplayItems)

    def retranslateUi(self, DisplayItems, prod_text, brand_text, up_text, qty_text, desc_text, supp_text, category_text):
        _translate = QtCore.QCoreApplication.translate
        DisplayItems.setWindowTitle(_translate("DisplayItems", "Display Items"))
        self.label.setText(_translate("DisplayItems", "Received Items"))
        self.date_label.setText(_translate("DisplayItems", QtCore.QDate.currentDate().toString("yyyy-MM-dd")))  # Add current date
        self.prod_label.setText(_translate("DisplayItems", "Product:"))
        self.brand_label.setText(_translate("DisplayItems", "Brand:"))
        self.up_label.setText(_translate("DisplayItems", "Unit Price:"))
        self.qty_label.setText(_translate("DisplayItems", "Quantity:"))
        self.desc_label.setText(_translate("DisplayItems", "Description:"))
        self.supplier_label.setText(_translate("DisplayItems", "Supplier:"))
        self.prod_value.setText(_translate("DisplayItems", prod_text))
        self.brand_value.setText(_translate("DisplayItems", brand_text))
        self.up_value.setText(_translate("DisplayItems", up_text))
        self.qty_value.setText(_translate("DisplayItems", qty_text))
        self.desc_value.setText(_translate("DisplayItems", desc_text))
        self.supplier_value.setText(_translate("DisplayItems", supp_text))
        self.category_label.setText(_translate("DisplayItems", "Category:"))
        self.category_value.setText(_translate("DisplayItems", category_text))


if __name__ == "__main__":
    import sys
    app = QtWidgets.QApplication(sys.argv)
    ReceiveItems = QtWidgets.QFrame()
    ui = Ui_ReceiveItems()
    ui.setupUi(ReceiveItems)
    ui.retrieve()
    ui.formWindowOpened()
    ReceiveItems.show()
    sys.exit(app.exec_())
