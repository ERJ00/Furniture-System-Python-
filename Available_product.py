# -*- coding: utf-8 -*-
import os
import subprocess

# Form implementation generated from reading ui file 'Available_product.ui'
#
# Created by: PyQt5 UI code generator 5.15.9
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.


from PyQt5 import QtCore, QtGui, QtWidgets
from PyQt5.QtGui import QFont
from PyQt5.QtWidgets import QTableWidgetItem

import main
from Encryption import Encryption
from Product import Product


class Ui_availableProduct(object):
    def setupUi(self, availableProduct):
        availableProduct.setObjectName("availableProduct")
        availableProduct.resize(800, 500)
        availableProduct.setMinimumSize(QtCore.QSize(800, 500))
        availableProduct.setMaximumSize(QtCore.QSize(800, 500))
        self.label = QtWidgets.QLabel(availableProduct)
        self.label.setGeometry(QtCore.QRect(0, 0, 800, 500))
        self.label.setStyleSheet("background-image: url(image/BG.jpeg);")
        self.label.setText("")
        self.label.setObjectName("label")
        self.tableView = QtWidgets.QTableWidget(availableProduct)
        self.tableView.setGeometry(QtCore.QRect(20, 70, 761, 401))
        self.tableView.setObjectName("tableView")
        self.pushButton = QtWidgets.QPushButton(availableProduct)
        self.pushButton.setGeometry(QtCore.QRect(10, 10, 50, 50))
        self.pushButton.setMinimumSize(QtCore.QSize(50, 50))
        self.pushButton.setMaximumSize(QtCore.QSize(50, 50))
        self.pushButton.setAcceptDrops(False)
        self.pushButton.setStyleSheet("background-color: rgba(255, 255, 255, 0);")
        self.pushButton.setText("")
        icon = QtGui.QIcon()
        icon.addPixmap(QtGui.QPixmap("image/Back_button.png"), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        self.pushButton.setIcon(icon)
        self.pushButton.setIconSize(QtCore.QSize(50, 50))
        self.pushButton.setObjectName("pushButton")
        self.label_3 = QtWidgets.QLabel(availableProduct)
        self.label_3.setGeometry(QtCore.QRect(10, 20, 781, 41))
        self.label_3.setStyleSheet("color: rgb(255, 255, 255);\n"
                                    "font: 75 24pt \"Perpetua Titling MT\";")
        self.label_3.setAlignment(QtCore.Qt.AlignCenter)
        self.label_3.setObjectName("label_3")
        self.retranslateUi(availableProduct)
        QtCore.QMetaObject.connectSlotsByName(availableProduct)

        self.tableView.setFont(QFont("Tahoma", 12))
        self.pushButton.clicked.connect(self.backToMain)
        self.pushButton.raise_()

    def retranslateUi(self,availableProduct):
        _translate = QtCore.QCoreApplication.translate
        availableProduct.setWindowTitle(_translate("availableProduct", "Available Products"))
        self.label_3.setText(_translate("availableProduct", "AVAILABLE PRODUCTS"))

    item = []

    def add_item(self, data):
        self.item.append(data)

    def retrieve(self):

        try:
            with open(Encryption.decrypt("Ifyfgfxj&uwtizhyx.ycy"), "r") as reader:
                for line in reader:
                    line = Encryption.decrypt(line)
                    arr_line = line.split(" / ")
                    temp = Product()  # Create a new instance for each item
                    temp.setID(int(arr_line[0].strip()))
                    temp.setPrice(int(arr_line[1].strip()))
                    temp.setQuantity(int(arr_line[2].strip()))
                    temp.setProductName(arr_line[3].strip())
                    temp.setBrand(arr_line[4].strip())
                    temp.setDescription(arr_line[5].strip())
                    temp.setCategory(arr_line[6].strip())
                    temp.setSupplier(arr_line[7].strip())
                    temp.setDate(arr_line[8].strip())
                    self.add_item(temp)
                    temp = Product()  # Create a new instance for each item
        except IOError as e:
            print("Error reading file:", e)
        finally:
            reader.close()

    def display_table(self):
        num_cols = 6

        # Filter items based on the category
        filtered_items = [item for item in self.item if item.getQuantity() > 0 ]
        num_rows = len(filtered_items)

        # Set the table dimensions
        self.tableView.setRowCount(num_rows)
        self.tableView.setColumnCount(num_cols)

        # Define the desired attribute names
        attribute_names = ["ID", "ProductName", "Brand", "Price", "Category", "Description"]
        self.tableView.setHorizontalHeaderLabels(attribute_names)

        # Populate the table with data
        for row in range(num_rows):
            item = self.item[row]
            for col in range(num_cols):
                attribute_name = attribute_names[col]
                value = getattr(item, attribute_name)
                table_item = QTableWidgetItem(str(value))

                # Set the item flags to make it read-only
                table_item.setFlags(QtCore.Qt.ItemIsEnabled | QtCore.Qt.ItemIsSelectable)

                self.tableView.setItem(row, col, table_item)

        # Adjust column widths to maximize space
        table_width = self.tableView.viewport().width()
        column_width = int(table_width / num_cols)
        for col in range(num_cols):
            self.tableView.setColumnWidth(col, column_width)

    def backToMain(self):
        availableProduct.destroy()
        current_directory = os.path.dirname(os.path.abspath(__file__))
        script_path = os.path.join(current_directory, "main.py")
        subprocess.run(["python", script_path])

if __name__ == "__main__":
    import sys

    app = QtWidgets.QApplication(sys.argv)
    availableProduct = QtWidgets.QFrame()
    ui = Ui_availableProduct()
    ui.setupUi(availableProduct)
    ui.retrieve()  # Populate the item list
    ui.display_table()  # Display the table
    availableProduct.show()
    sys.exit(app.exec_())
